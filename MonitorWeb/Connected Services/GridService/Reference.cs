//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitorWeb.GridService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GridService.IMeasureControl")]
    public interface IMeasureControl {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/SetEstado", ReplyAction="http://tempuri.org/IMeasureControl/SetEstadoResponse")]
        bool SetEstado(string nombre, bool valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/SetEstado", ReplyAction="http://tempuri.org/IMeasureControl/SetEstadoResponse")]
        System.Threading.Tasks.Task<bool> SetEstadoAsync(string nombre, bool valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/GetEstado", ReplyAction="http://tempuri.org/IMeasureControl/GetEstadoResponse")]
        bool GetEstado(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/GetEstado", ReplyAction="http://tempuri.org/IMeasureControl/GetEstadoResponse")]
        System.Threading.Tasks.Task<bool> GetEstadoAsync(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/GetLog", ReplyAction="http://tempuri.org/IMeasureControl/GetLogResponse")]
        string GetLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/GetLog", ReplyAction="http://tempuri.org/IMeasureControl/GetLogResponse")]
        System.Threading.Tasks.Task<string> GetLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/Resumen", ReplyAction="http://tempuri.org/IMeasureControl/ResumenResponse")]
        string Resumen();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/Resumen", ReplyAction="http://tempuri.org/IMeasureControl/ResumenResponse")]
        System.Threading.Tasks.Task<string> ResumenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/Manual", ReplyAction="http://tempuri.org/IMeasureControl/ManualResponse")]
        bool Manual(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureControl/Manual", ReplyAction="http://tempuri.org/IMeasureControl/ManualResponse")]
        System.Threading.Tasks.Task<bool> ManualAsync(bool value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasureControlChannel : MonitorWeb.GridService.IMeasureControl, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasureControlClient : System.ServiceModel.ClientBase<MonitorWeb.GridService.IMeasureControl>, MonitorWeb.GridService.IMeasureControl {
        
        public MeasureControlClient() {
        }
        
        public MeasureControlClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeasureControlClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasureControlClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasureControlClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SetEstado(string nombre, bool valor) {
            return base.Channel.SetEstado(nombre, valor);
        }
        
        public System.Threading.Tasks.Task<bool> SetEstadoAsync(string nombre, bool valor) {
            return base.Channel.SetEstadoAsync(nombre, valor);
        }
        
        public bool GetEstado(string nombre) {
            return base.Channel.GetEstado(nombre);
        }
        
        public System.Threading.Tasks.Task<bool> GetEstadoAsync(string nombre) {
            return base.Channel.GetEstadoAsync(nombre);
        }
        
        public string GetLog() {
            return base.Channel.GetLog();
        }
        
        public System.Threading.Tasks.Task<string> GetLogAsync() {
            return base.Channel.GetLogAsync();
        }
        
        public string Resumen() {
            return base.Channel.Resumen();
        }
        
        public System.Threading.Tasks.Task<string> ResumenAsync() {
            return base.Channel.ResumenAsync();
        }
        
        public bool Manual(bool value) {
            return base.Channel.Manual(value);
        }
        
        public System.Threading.Tasks.Task<bool> ManualAsync(bool value) {
            return base.Channel.ManualAsync(value);
        }
    }
}
